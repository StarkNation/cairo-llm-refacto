question,answer
"Is there a 'while' keyword in Cairo?","No, you have to use a loop structure."
"write a snippet that correct the following code:
k=0;
for i=3 to 10:
    k++
","
```
    let mut k = 0;
    let mut i = 3;
    loop {  // 'for' does not exist in Cairo
        if i == 10 {
                    break;
        }
        k +=1;
        i += 1;
    }
```
"
"correct the issue:
    i = 0;
    while(i<10) {
        'hello world'.print();
        i += 1;
    }

","
```
    i = 0;
    loop {  // While does not exist in Cairo
        if i == 10 {
            break;
        }
        'hello world'.print();
        i += 1;
    }
```
"
"print 'hello world' ten times","
```
    i = 0;
    loop {
        if i == 10 {
            break;
        }
        'hello world'.print();
        i += 1;
    }
```
"
"do a for, for i=0 to 5","
```
 
    i = 0;
    loop {
        if i == 5 {
            break;
        }
        i += 1;
    }
```
"
"is there a 'for' keyword?","No, you have to use the loop keyword:
```
    let i=START_VALUE;
    loop{
            if i == MAX_ITERATION;
            {
                break;
            }
            i+=1;
    }
```
"
"u(n) = n + u(n-1), please compute u(10)","
```
    let u = 0_32;
    let i =0_32;
    let MAX_ITERATION = 11;

    loop {
            if i == MAX_ITERATION;
            {            
                break;
            }
            u = i + u;
            i+=1;
    }
    // u is set to u(10)
```
 "
" what happens if I call a loop without break"," In therory you should fall into an infinite loop, but cairo has a mechanism to prevent it"
"What mechanism protects from infinite loops ?","Cairo prevents us from running program with infinite loops by including a gas meter. The gas meter is a mechanism that limits the amount of computation that can be done in a program. By setting a value to the --available-gas flag, we can set the maximum amount of gas available to the program. Gas is a unit of measurements that expresses the computation cost of an instruction. When the gas meter runs out, the program will stop. In this case, the program panicked because it ran out of gas, as the stop condition was never reached. It is particularly important in the context of smart contracts deployed on Starknet, as it prevents from running infinite loops on the network. If you're writing a program that needs to run a loop, you will need to execute it with the --available-gas flag set to a value that is large enough to run the program."
"What does this program do ?

fn main() {
    let mut counter = 0;

    let result = loop {
        if counter == 10 {
            break counter * 2;
        }
        counter += 1;
    };

    'The result is '.print();
    result.print();
}","

- Before the loop, we declare a variable named counter and initialize it to 0. Then we declare a variable named result to hold the value returned from the loop. On every iteration of the loop, we check whether the counter is equal to 10, and then add 1 to the counter variable. When the condition is met, we use the break keyword with the value counter * 2. After the loop, we use a semicolon to end the statement that assigns the value to result. Finally, we print the value in result, which in this case is 20.
"
"write a snippet that corrects the following code:
x = 5;
for j = 1 to 7:
    x--
","
    let mut x = 5;
    let mut j = 1;
    loop {
        if j == 7 {
            break;
        }
        x -= 1;
        j += 1;
"
"write a snippet that corrects the following code:
y = 10;
for z = 4 to 8:
y++
","  
```  
let mut y = 10;
let mut z = 4;
loop {
    if z == 8 {
        break;
    }
    y += 1;
    z += 1;
}
```
"
"
write a snippet that corrects the following code:
a = 0;
for b = 2 to 5:
    a--
","
```
    let mut a = 0;
    let mut b = 2;
    loop {
        if b == 5 {
            break;
        }
        a -= 1;
        b += 1;
    }
```
"
"
write a snippet that corrects the following code:
m = 3;
for n = 6 to 9:
m++
","
```
let mut m = 3;
let mut n = 6;
loop {
    if n == 9 {
        break;
    }
    m += 1;
    n += 1;
}
```
"
"
write a snippet that corrects the following code:
p = 7;
for q in 3 ... 6:
    p--
","
```
    let mut p = 7;
    let mut q = 3;
    loop {
        if q == 6 {
            break;
        }
        p -= 1;
        q += 1;
    }
```
"
"write a snippet that corrects the following code:
s = 4;
for t = 2 to 4:
s++
","
```
let mut s = 4;
let mut t = 2;
loop {
    if t == 4 {
        break;
    }
    s += 1;
    t += 1;
}
```
"

