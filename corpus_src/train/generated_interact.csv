question,answer
"give the source for the Vote contract sample","/// @dev Core Library Imports for the Traits outside the Starknet Contract
use starknet::ContractAddress;

/// @dev Trait defining the functions that can be implemented or called by the Starknet Contract
#[starknet::interface]
trait VoteTrait<T> {
    /// @dev Function that returns the current vote status
    fn get_vote_status(self: @T) -> (u8, u8, u8, u8);
    /// @dev Function that checks if the user at the specified address is allowed to vote
    fn voter_can_vote(self: @T, user_address: ContractAddress) -> bool;
    /// @dev Function that checks if the specified address is registered as a voter
    fn is_voter_registered(self: @T, address: ContractAddress) -> bool;
    /// @dev Function that allows a user to vote
    fn vote(ref self: T, vote: u8);
}

/// @dev Starknet Contract allowing three registered voters to vote on a proposal
#[starknet::contract]
mod Vote {
    use starknet::ContractAddress;
    use starknet::get_caller_address;

    const YES: u8 = 1_u8;
    const NO: u8 = 0_u8;

    /// @dev Structure that stores vote counts and voter states
    #[storage]
    struct Storage {
        yes_votes: u8,
        no_votes: u8,
        can_vote: LegacyMap::<ContractAddress, bool>,
        registered_voter: LegacyMap::<ContractAddress, bool>,
    }

    /// @dev Contract constructor initializing the contract with a list of registered voters and 0 vote count
    #[constructor]
    fn constructor(
        ref self: ContractState,
        voter_1: ContractAddress,
        voter_2: ContractAddress,
        voter_3: ContractAddress
    ) {
        // Register all voters by calling the _register_voters function
        self._register_voters(voter_1, voter_2, voter_3);

        // Initialize the vote count to 0
        self.yes_votes.write(0_u8);
        self.no_votes.write(0_u8);
    }

    /// @dev Event that gets emitted when a vote is cast
    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        VoteCast: VoteCast,
        UnauthorizedAttempt: UnauthorizedAttempt,
    }

    /// @dev Represents a vote that was cast
    #[derive(Drop, starknet::Event)]
    struct VoteCast {
        voter: ContractAddress,
        vote: u8,
    }

    /// @dev Represents an unauthorized attempt to vote
    #[derive(Drop, starknet::Event)]
    struct UnauthorizedAttempt {
        unauthorized_address: ContractAddress,
    }

    /// @dev Implementation of VoteTrait for ContractState
    #[external(v0)]
    impl VoteImpl of super::VoteTrait<ContractState> {
        /// @dev Returns the voting results
        fn get_vote_status(self: @ContractState) -> (u8, u8, u8, u8) {
            let (n_yes, n_no) = self._get_voting_result();
            let (yes_percentage, no_percentage) = self._get_voting_result_in_percentage();
            (n_yes, n_no, yes_percentage, no_percentage)
        }

        /// @dev Check whether a voter is allowed to vote
        fn voter_can_vote(self: @ContractState, user_address: ContractAddress) -> bool {
            self.can_vote.read(user_address)
        }

        /// @dev Check whether an address is registered as a voter
        fn is_voter_registered(self: @ContractState, address: ContractAddress) -> bool {
            self.registered_voter.read(address)
        }

        /// @dev Submit a vote
        fn vote(ref self: ContractState, vote: u8) {
            assert(vote == NO || vote == YES, 'VOTE_0_OR_1');
            let caller: ContractAddress = get_caller_address();
            self._assert_allowed(caller);
            self.can_vote.write(caller, false);

            if (vote == NO) {
                self.no_votes.write(self.no_votes.read() + 1_u8);
            }
            if (vote == YES) {
                self.yes_votes.write(self.yes_votes.read() + 1_u8);
            }

            self.emit(VoteCast { voter: caller, vote: vote, });
        }
    }

    /// @dev Internal Functions implementation for the Vote contract
    #[generate_trait]
    impl InternalFunctions of InternalFunctionsTrait {
        /// @dev Registers the voters and initializes their voting status to true (can vote)
        fn _register_voters(
            ref self: ContractState,
            voter_1: ContractAddress,
            voter_2: ContractAddress,
            voter_3: ContractAddress
        ) {
            self.registered_voter.write(voter_1, true);
            self.can_vote.write(voter_1, true);

            self.registered_voter.write(voter_2, true);
            self.can_vote.write(voter_2, true);

            self.registered_voter.write(voter_3, true);
            self.can_vote.write(voter_3, true);
        }
    }

    /// @dev Asserts implementation for the Vote contract
    #[generate_trait]
    impl AssertsImpl of AssertsTrait {
        // @dev Internal function that checks if an address is allowed to vote
        fn _assert_allowed(ref self: ContractState, address: ContractAddress) {
            let is_voter: bool = self.registered_voter.read((address));
            let can_vote: bool = self.can_vote.read((address));

            if (can_vote == false) {
                self.emit(UnauthorizedAttempt { unauthorized_address: address, });
            }

            assert(is_voter == true, 'USER_NOT_REGISTERED');
            assert(can_vote == true, 'USER_ALREADY_VOTED');
        }
    }

    /// @dev Implement the VotingResultTrait for the Vote contract
    #[generate_trait]
    impl VoteResultFunctionsImpl of VoteResultFunctionsTrait {
        // @dev Internal function to get the voting results (yes and no vote counts)
        fn _get_voting_result(self: @ContractState) -> (u8, u8) {
            let n_yes: u8 = self.yes_votes.read();
            let n_no: u8 = self.no_votes.read();

            (n_yes, n_no)
        }

        // @dev Internal function to calculate the voting results in percentage
        fn _get_voting_result_in_percentage(self: @ContractState) -> (u8, u8) {
            let n_yes: u8 = self.yes_votes.read();
            let n_no: u8 = self.no_votes.read();

            let total_votes: u8 = n_yes + n_no;

            if (total_votes == 0_u8) {
                return (0, 0);
            }
            let yes_percentage: u8 = (n_yes * 100_u8) / (total_votes);
            let no_percentage: u8 = (n_no * 100_u8) / (total_votes);

            (yes_percentage, no_percentage)
        }
    }
}"
"What is the main purpose of the Vote contract in Starknet?","The Vote contract in Starknet is used for registering voters and allowing them to cast their votes."
"given the Vote Contract:How are voters registered in the Vote contract?","Voters are registered through the contract's constructor where their addresses are passed to the _register_voters function."
"given the Vote Contract:How are the voting options represented in the contract?","The voting options are represented by the constants YES and NO, which correspond to the values 1 and 0, respectively."
"given the Vote Contract:How is the state of the contract updated after a voter casts their vote?","When a voter casts their vote, the state of the contract is updated by recording the vote and marking the voter as having voted."
"given the Vote Contract:What prevents a registered voter from voting multiple times in the same proposal?","After a voter casts their vote, they are marked as having voted in the contract's state, ensuring they can't vote again for the same proposal."
"given the Vote Contract:What event is triggered when a vote is cast?","The VoteCast event is triggered when a vote is cast."
"given the Vote Contract:What happens if an unauthorized action like a non-registered user attempting to vote is detected?","If an unauthorized action is detected, the UnauthorizedAttempt event is emitted."
"given the Vote Contract:How do constants like YES and NO help in the voting process?","Constants like YES and NO help in standardizing the input values and streamlining the voting process."
"given the Vote Contract:What role do events play in the voting system?","Events play a vital role in ensuring transparency and traceability within the voting system."
"given the Vote Contract:What is the difference between calling and invoking a contract in Starknet?","Calling contracts interacts with functions that only read from the state and don't alter the state, while invoking contracts interacts with functions that can write to the state and alter it."
"Why is katana recommended for local development and testing?","Katana is designed to support local development, allowing developers to do everything they need with Starknet, but locally."
"How do you start a local Starknet node using katana?","You can start a local Starknet node using the command 'katana --accounts 3 --seed 0 --gas-price 250'."
"What does the katana command provided start with respect to accounts?","The command starts a local Starknet node with 3 deployed accounts."
"Where can you find a tutorial for using katana in the Starknet environment?","A complete tutorial for katana can be found in the Local Development with Katana chapter of the Starknet Book."
"given the Vote Contract:How are the voting options defined within the Starknet voting contract?","The voting options are defined as constants YES (for 1) and NO (for 0)."
"given the Vote Contract:After registering, how does a voter cast their vote?","A voter can cast their vote using the vote function, selecting either the 1 (YES) or 0 (NO) as their vote."
"given the Vote Contract:In the Vote contract, what happens when a vote is cast?","The contract's state is updated, recording the vote, marking the voter as having voted, and the VoteCast event is triggered."
"given the Vote Contract:What's the role of the UnauthorizedAttempt event?","The UnauthorizedAttempt event is emitted when an unauthorized action like a non-registered user attempting to vote or a user trying to vote again is detected."
"given the Vote Contract:What does the trait VoteTrait<T> define?","The VoteTrait<T> trait defines functions related to the voting process, such as getting the current vote status, checking if a user can vote, checking if an address is registered as a voter, and allowing a user to vote."
"given the Vote Contract:How are YES and NO represented in the code?","YES and NO are represented as constants with values 1_u8 and 0_u8 respectively."
"given the Vote Contract:What is the purpose of the 'vote' function in the VoteImpl implementation?","The 'vote' function allows a registered voter to submit their vote (YES or NO) and updates the contract's state accordingly."
"given the Vote Contract:Which event gets emitted when a registered voter casts their vote?","The VoteCast event gets emitted when a registered voter casts their vote."
"In the Vote contract's constructor, how are votes initialized?","In the constructor, the vote counts (yes_votes and no_votes) are initialized to 0."
"In the Vote contract, how is a vote recorded as YES or NO?","A vote is recorded based on the input value given to the 'vote' function, where 1 corresponds to YES and 0 corresponds to NO."
"given the Vote Contract:What does the InternalFunctions implementation in the Vote contract handle?","The InternalFunctions implementation in the Vote contract handles the registration of voters and initializes their voting status."
"What's the main function of the AssertsImpl implementation in the Vote contract?","The AssertsImpl implementation checks if an address is allowed to vote and emits the UnauthorizedAttempt event if not allowed."
"given the Vote Contract:How does the VoteResultFunctionsImpl implementation retrieve voting results?","The VoteResultFunctionsImpl retrieves the voting results by reading the yes_votes and no_votes from the contract's state and calculating their respective percentages."
question,answer
"What keyword is used to denote a smart contract in Starknet?","#[starknet::contract]"
"given the Vote Contract:What constants are used to represent voting options?","const YES: u8 = 1_u8; const NO: u8 = 0_u8;"
"given the Vote Contract:How are the initial voters registered?","Through the contract's constructor."
"given the Vote Contract:What is the signature of the function used to check if a specific user is registered to vote?","fn is_voter_registered(self: @T, address: ContractAddress) -> bool;"
"given the Vote Contract:How are voting options standardized in the contract?","Using constants YES and NO."
"given the Vote Contract:What event gets emitted when a vote is cast?","VoteCast"
"given the Vote Contract:How does the contract prevent a registered user from voting more than once?","By updating the contract's state marking the voter as having voted."
"given the Vote Contract:What is the function to cast a vote?","fn vote(ref self: T, vote: u8);"
"given the Vote Contract:What's the purpose of the UnauthorizedAttempt event?","To log unauthorized voting attempts."
"given the Vote Contract:What is the type used to represent a contract's address?","ContractAddress"
"given the Vote Contract:How many initial voters are registered in the Vote contract?","Three"
"given the Vote Contract:How is the vote of a user recorded?","The state of the contract is updated."
"How do you assert in the contract?","Using the assert keyword."
"How do you emit an event in the contract?","Using the emit keyword."
"given the Vote Contract:What is the trait defining functions that can be implemented or called by the Starknet Contract?","VoteTrait<T>"
"What keyword is used to denote an external function in Starknet?","#[external(v0)]"
"What keyword denotes an event?","#[event]"
"What keyword is used for importing core libraries for the traits outside the Starknet Contract?","use"
"given the Vote Contract:What function checks if a user at a specific address is allowed to vote?","fn voter_can_vote(self: @T, user_address: ContractAddress) -> bool;"
"given the Vote Contract:How is a voter marked as having voted after they cast their vote?","The can_vote state for that voter is set to false."
"Hgiven the Vote Contract:ow are unauthorized voting attempts handled?","An UnauthorizedAttempt event is emitted."
"given the Vote Contract:What function returns the current vote status?","fn get_vote_status(self: @T) -> (u8, u8, u8, u8);"
"What function is used to get the calling user's address?","get_caller_address();"
"given the Vote Contract:How are voters initialized?","Three voter addresses are passed to an internal function _register_voters."
"What type of function only reads from the state and does not require fees or signing?","Calling contracts"
"What type of function can write to the state and requires fees and signing?","Invoking contracts"
"What is katana used for?","Supporting local development by the Dojo team."
"How can you start the local Starknet node with katana?","katana --accounts 3 --seed 0 --gas-price 250"
"given the Vote Contract:What is the signature of the function that returns the voting results?","fn get_vote_status(self: @ContractState) -> (u8, u8, u8, u8);"
"What keyword denotes an internal function in Starknet?","#[generate_trait]"
"What is the purpose of the LegacyMap type?","To store key-value pairs in the contract's storage."
"What is the Starknet keyword to specify a contract's storage structure?","#[storage]"
"given the Vote Contract:What happens if a user tries to vote with a value other than 0 or 1?","An assertion error with the message 'VOTE_0_OR_1' occurs."
"In the Vote contract, how is the percentage of 'yes' votes calculated?","(n_yes * 100_u8) / (total_votes)"
"given the Vote Contract:How is the percentage of 'no' votes calculated in the Vote contract?","(n_no * 100_u8) / (total_votes)"
"given the Vote Contract:What Starknet keyword is used to denote a contract constructor?","#[constructor]"
"given the Vote Contract:What function is used to register voters in the contract?","_register_voters"
"given the Vote Contract:How are the vote counts initialized in the constructor?","They are set to 0."
"given the Vote Contract:What is the event structure that represents a vote that was cast?","struct VoteCast"
"given the Vote Contract:What is the event structure that represents an unauthorized attempt to vote?","struct UnauthorizedAttempt"
"What Starknet keyword is used to denote a derived event?","#[derive(Drop, starknet::Event)]"
"given the Vote Contract:What function is called internally to get the voting results?","_get_voting_result"
"given the Vote Contract:What function is used internally to calculate the voting results in percentage?","_get_voting_result_in_percentage"
"given the Vote Contract:What assertion ensures a vote is either YES or NO?","assert(vote == NO || vote == YES, 'VOTE_0_OR_1');"
"given the Vote Contract:How is the voting percentage calculated if total votes are 0?","The percentages are returned as (0, 0)."
"given the Vote Contract:How does the Vote contract ensure a registered voter can vote only once?","By checking the can_vote state for the voter's address."
"given the Vote Contract:How is an unauthorized voting attempt detected?","By checking the is_voter and can_vote states for a voter's address."
"given the Vote Contract:What event is emitted when a vote is successfully cast?","VoteCast"
"given the Vote Contract:How is the number of 'yes' votes retrieved from storage?","self.yes_votes.read()"
"given the Vote Contract:How is the number of 'no' votes retrieved from storage?","self.no_votes.read()"
"given the Vote Contract:What structure stores vote counts and voter states in the Vote contract?","struct Storage"
"given the Vote Contract:How does the Vote contract ensure that only registered voters can vote?","By checking the registered_voter state for a voter's address."
"How is the vote count incremented for 'yes' votes?","self.yes_votes.write(self.yes_votes.read() + 1_u8);"
"How is the vote count incremented for 'no' votes?","self.no_votes.write(self.no_votes.read() + 1_u8);"
"What keyword in Starknet is used to import a trait or a module?","use"
"given the Vote Contract:What function registers voters and initializes their voting status?","_register_voters"
"given the Vote Contract:How many voters are registered in the constructor of the Vote contract?","Three"
"given the Vote Contract:How does the contract know if a vote is a 'yes' vote?","By checking if vote == YES."
"given the Vote Contract:How does the contract know if a vote is a 'no' vote?","By checking if vote == NO."
"given the Vote Contract:How is a 'yes' vote stored?","The yes_votes state is incremented by 1."
"given the Vote Contract:How is a 'no' vote stored?","The no_votes state is incremented by 1."
"given the Vote Contract:How are the vote counts initialized?","They are initialized to 0 in the constructor."
"given the Vote Contract:What function checks if a voter has already voted?","fn voter_can_vote(self: @T, user_address: ContractAddress) -> bool;"
"given the Vote Contract:What are the two constants representing voting options?","YES and NO"
"given the Vote Contract:How is a vote cast in the contract?","By invoking the vote function."
"given the Vote Contract:What are the four return values of the get_vote_status function?","Number of 'yes' votes, Number of 'no' votes, Percentage of 'yes' votes, Percentage of 'no' votes."
"given the Vote Contract:How does the contract ensure that a vote is either a 'yes' or a 'no'?","Using the assert statement with a condition on the vote value."
"given the Vote Contract:How is a registered voter prevented from voting again?","By setting the can_vote state for that voter to false."
"What is the purpose of the LegacyMap in Starknet?","To represent key-value pairs in the contract's storage."
"What is the syntax to declare a function as external in Starknet?","#[external(v0)]"
question,answer
"given the Vote Contract:What must each voter account be registered and sufficiently funded for?", "voting"
"Which command line tool allows you to interact with Starknet?", "Starkli"
"Where can you find the installation instructions for Starkli?", "Environment setup chapter of the Starknet Book"
"What do you need to create for each smart wallet?", "A Signer within the encrypted keystore and an Account Descriptor"
"How do you create a signer from a private key?", "starkli signer keystore from-key ~/.starkli-wallets/deployer/account0_keystore.json"
"How can you create the Account Descriptor?", "touch ~/.starkli-wallets/deployer/account0_account.json"
"What will the Account Descriptor look like?", "{\"version\": 1,\"variant\": {\"type\": \"open_zeppelin\",\"version\": 1,\"public_key\": \"<SMART_WALLET_PUBLIC_KEY>\"},\"deployment\": {\"status\": \"deployed\",\"class_hash\": \"<SMART_WALLET_CLASS_HASH>\",\"address\": \"<SMART_WALLET_ADDRESS>\"}}"
"From where can you get the public key and the smart wallet address for the Account Descriptor?", "output of the initial katana command"
"How can you retrieve the smart wallet class hash?", "starkli class-hash-at <SMART_WALLET_ADDRESS> --rpc http://0.0.0.0:5050"
"How do you inspect the starkli signer keystore?", "starkli signer keystore inspect ~/.starkli-wallets/deployer/account0_keystore.json"
"What should you do before deploying a contract?", "declare the contract"
"How do you declare a contract?", "starkli declare target/dev/starknetbook_chapter_2_Vote.sierra.json --rpc http://0.0.0.0:5050 --account ~/.starkli-wallets/deployer/account0_account.json --keystore ~/.starkli-wallets/deployer/account0_keystore.json"
"What flag can be added to specify a compiler version?", "--compiler-version x.y.z"
"If there's an issue with the compiler version, how can you upgrade Starkli?", "starkliup"
"What does the --rpc flag specify?", "the RPC endpoint to use"
"What is the purpose of the --account flag?", "specifies the account to use for signing the transaction"
"How long does a transaction typically take to achieve finality on a local node?", "immediately"
"given the Vote Contract:How do you deploy the voting contract and register eligible voters?", "starkli deploy <class_hash_of_the_contract_to_be_deployed> <voter_0_address> <voter_1_address> <voter_2_address> --rpc http://0.0.0.0:5050 --account ~/.starkli-wallets/deployer/account0_account.json --keystore ~/.starkli-wallets/deployer/account0_keystore.json"
"given the Vote Contract:How many voters are registered in the example command?", "3"
"given the Vote Contract:Which function checks if an address is registered as an eligible voter?", "is_voter_registered"
"given the Vote Contract:What does the voter_can_vote function check?", "whether the voter at a specific address is currently eligible to vote and hasn't voted already"
"What command is used for read functions in Starknet?", "starkli call"
"What command is used for functions that can also write to storage in Starknet?", "starkli invoke"
"given the Vote Contract:How do you call the voter_can_vote function?", "starkli call 0x05ea3a690be71c7fcd83945517f82e8861a97d42fca8ec9a2c46831d11f33349 voter_can_vote 0x03ee9e18edc71a6df30ac3aca2e0b02a198fbce19b7480a63a0d71cbd76652e0 --rpc http://0.0.0.0:5050"
"given the Vote Contract:How do you vote 'Yes' in the voting contract?", "starkli invoke 0x05ea3a690be71c7fcd83945517f82e8861a97d42fca8ec9a2c46831d11f33349 vote 1 --rpc http://0.0.0.0:5050 --account ~/.starkli-wallets/deployer/account0_account.json --keystore ~/.starkli-wallets/deployer/account0_keystore.json"
"given the Vote Contract:What input do you submit to vote 'No'?", "0"
"How do you retrieve details about a specific transaction?", "starkli transaction <TRANSACTION_HASH> --rpc http://0.0.0.0:5050"
"given the Vote Contract:What error is returned if you try to vote twice with the same signer?", "Trying to vote twice is prohibited."
"given the Vote Contract:Can you vote twice with two different signers linked to the same smart wallet?", "No"
"given the Vote Contract:How do you call the get_vote_count function to check the current vote counts?", "starkli call 0x05ea3a690be71c7fcd83945517f82e8861a97d42fca8ec9a2c46831d11f33349 get_vote_count --rpc http://0.0.0.0:5050"
"given the Vote Contract:Which function returns the number of 'Yes' votes?", "get_vote_count"
"How do you inspect the current balance of a specific account?", "starkli account-balance <SMART_WALLET_ADDRESS> --rpc http://0.0.0.0:5050"
"What kind of addresses can interact with StarkNet contracts?", "Only StarkNet account addresses"
"What is an example of a StarkNet account address?", "0x03ee9e18edc71a6df30ac3aca2e0b02a198fbce19b7480a63a0d71cbd76652e0"
"Why can't you use Ethereum addresses for StarkNet interactions?", "They are not StarkNet accounts"
"What do you use for transaction signing in StarkNet?", "StarkNet signer"
"How do you install the StarkNet signer?", "Follow the instructions in the StarkNet book"
"How do you obtain the private key for your Ethereum account?", "Never. It's not recommended to expose private keys."
"How do you sign a transaction in StarkNet?", "Using the StarkNet signer"
"given the Vote Contract:What does the is_voter_registered function return?", "A boolean indicating if a given address is registered as a voter"
"How do you ensure your contract code is correct?", "By thoroughly testing it"
"How do you register a new eligible voter?", "By deploying the contract and passing the address of the eligible voter"
"given the Vote Contract:Can an eligible voter be added after the contract has been deployed?", "Not according to the given code"
"How do you check if a transaction was successful?", "By retrieving details about the transaction using starkli transaction"
"given the Vote Contract:What happens if you try to vote before registering?", "The transaction will fail"
"What is a typical error when working with undeclared contracts?", "The contract is not found"
"given the Vote Contract:Why do you need to fund each voter's account?", "To pay for transaction fees"
"given the Vote Contract:What is the primary use of the voting contract?", "To allow eligible addresses to vote 'Yes' or 'No'"
"How do you define a function that writes to storage in StarkNet?", "By specifying the write keyword"
"Is it possible to use Starkli without a specified RPC endpoint?", "No, the RPC endpoint must be specified using the --rpc flag"
"Which entity in StarkNet keeps track of which accounts have already voted?", "The contract's internal storage"
"given the Vote Contract:How is the current vote count stored in StarkNet?", "Using contract storage"
"given the Vote Contract:Can the vote count be tampered with externally?", "No, the vote count is stored securely within the contract"
"given the Vote Contract:How do you test the voting functionality?", "By invoking the contract's vote function and then checking the result"
"given the Vote Contract:How do you verify the result of a vote?", "By calling the get_vote_count function"
"What should you do if your transaction fails?", "Inspect the error message and diagnose the issue"
"How do you diagnose a failed transaction?", "By retrieving details about the transaction using the starkli transaction command"
"What is the difference between starkli call and starkli invoke?", "starkli call is for read functions, while starkli invoke is for functions that can also write to storage"
"What is the significance of the --account and --keystore flags?", "They specify the account and keystore to use for signing the transaction, respectively"
"What type of accounts can be registered as voters?", "StarkNet accounts"
"How are votes tallied in the contract?", "Using internal storage counters for 'Yes' and 'No' votes"
"Is it necessary to specify the RPC endpoint every time you use starkli?", "Yes, it is recommended to always specify the RPC endpoint using the --rpc flag"
"How is the smart wallet's public key generated?", "It is derived from the private key"
